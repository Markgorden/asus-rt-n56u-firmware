#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <nvram/bcmnvram.h>
#include <time.h>
#include <stdlib.h>

#define DETECT_FILE "/tmp/detect_internet"
#define MAX_TTL 4

static int host_num = 0;
static int di_debug = 0;
static char wanif[8];

static void
wan_nvram_clean_up()
{
	nvram_set("wan0_ipaddr", "0.0.0.0");
	nvram_set("wan_ipaddr_t", "0.0.0.0");

	nvram_set("wan0_gateway", "0.0.0.0");
	nvram_set("wan_gateway_t", "0.0.0.0");
}

int
found_default_route()
{
	int i, n, found;
	FILE *f;
	unsigned int dest, mask;
	char buf[256], device[256];

	n = 0;
	found = 0;
	mask = 0;
	device[0] = '\0';

	if (f = fopen("/proc/net/route", "r"))
	{
		while (fgets(buf, sizeof(buf), f) != NULL)
		{
			if (++n == 1 && strncmp(buf, "Iface", 5) == 0)
				continue;

			i = sscanf(buf, "%255s %x %*s %*s %*s %*s %*s %x",
						device, &dest, &mask);

			if (i != 3)
			{
//				fprintf(stderr, "junk in buffer");
				break;
			}

			if (device[0] != '\0' && dest == 0 && mask == 0)
			{
				if (di_debug) fprintf(stderr, "default route dev: %s\n", device);
				found = 1;
				break;
			}
		}

		fclose(f);

		if (found && !strcmp(wanif, device))
		{
			if (di_debug) fprintf(stderr, "got default route!\n");
			return 1;
		}
		else
		{
			if (di_debug) fprintf(stderr, "1. no default route!\n");
			//wan_nvram_clean_up();	// test
			return 0;
		}
	}

	if (di_debug)  fprintf(stderr, "2. no default route!\n");
	//wan_nvram_clean_up();			// test
	return 0;
}

static int do_detect()
{
	FILE *fp = NULL;
	char cmd[128];
//	char detect_host0[16] = "18.52.86.150";
	char detect_host0[16] = "208.67.220.220";
	char detect_host1[16] = "8.8.8.8";
	char line[256];
	char get_ip[MAX_TTL][32];
	char *no_host = "!H", *no_net = "!N", *tr_str = "traceroute to", *p;
	int i, j = 0;
	int first_line = 1;
	int count = 0;

	if (di_debug) fprintf(stderr, "## detect internet status ##\n");

	while (j < MAX_TTL)
	{
		memset(&get_ip[j], 0, sizeof(get_ip[j]));
		++j;
	}

	if (pids("traceroute"))
		system("killall traceroute");

	remove(DETECT_FILE);
	host_num = (host_num + 1) % 2;
	if (host_num)
		snprintf(cmd, sizeof(cmd), "traceroute -n -w 2 -m %d %s >%s", MAX_TTL, detect_host0, DETECT_FILE);
	else
		snprintf(cmd, sizeof(cmd), "traceroute -n -w 2 -m %d %s >%s", MAX_TTL, detect_host1, DETECT_FILE);
	system(cmd);

	i = 0;
	if ((fp = fopen(DETECT_FILE, "r")) != NULL) 
	{
		while (i < MAX_TTL)
		{
			/* get ip */
			if ( fgets(line, sizeof(line), fp) != NULL ) 
			{
				if (first_line)
					first_line = 0;

				if (strstr(line, no_host) || strstr(line, no_net))       // add
				{
					if (di_debug) fprintf(stderr, "detect internet status: no host or no network\n");
					fclose(fp);
					if (di_debug) fprintf(stderr, "end detect internet status\n");
					return -1;
				}

				if (strstr(line, tr_str))
					continue;

				p = strstr(line, "  ");
				if (!p)
					continue;

				j = 1;
				++p;
				++p;

				if ((*p) == '*')
				{
					fclose(fp);
					if (di_debug) fprintf(stderr, "end detect internet status\n");
					return -1;
				}

				while ((*p) != ' ')
				{
					get_ip[i][j-1] = *p;
					++p;
					++j;
				}
				get_ip[i][j-1] = '\0';

				count++;
			}

			++i;
		}

		if (!first_line && count)
		{
			if (di_debug) fprintf(stderr, "count: %d\n", count);

			i = 0;
			while (i < MAX_TTL)
			{
				if (di_debug) fprintf(stderr, "%d. %s\n", i+1, get_ip[i]);
				++i;
			}
		}
	}
	else
	{
		if (di_debug) fprintf(stderr, "end detect internet status\n");
		return 0;
	}

	fclose(fp);
	if (di_debug) fprintf(stderr, "end detect internet status\n");

	if (!first_line && count)
		return 1;
	else
		return 0;
}

void catch_sig_detect_internet(int sig)
{
	int ret;
	time_t now;
	int link_internet = 0;

	if (sig == SIGALRM)
	{
		now = time((time_t *)0);

		if (di_debug)
		{
			fprintf(stderr, "detect_timestamp rc: %s\n", nvram_safe_get("detect_timestamp"));
			fprintf(stderr, "timeout: %d\n", (unsigned long)(now - strtoul(nvram_safe_get("detect_timestamp"), NULL, 10)));
		}

		if ((unsigned long)(now - strtoul(nvram_safe_get("detect_timestamp"), NULL, 10)) > 60)
		{
			if (di_debug) fprintf(stderr, "exit for timeout!\n");
			exit(0);
		}

		if (!is_phyconnected() || !has_wan_ip() || !found_default_route())
		{
			if (di_debug) fprintf(stderr, "link down, no WAN IP, or no default route!\n");
			nvram_set("link_internet", "0");
			alarm(5);
			return;
		}

		if (nvram_match("no_internet_detect", "1"))
		{
			if (di_debug) fprintf(stderr, "exit for wan rate detection!\n");
			exit(0);
		}	

		if (do_detect() == 1)
		{
			if (di_debug) fprintf(stderr, "internet connection ok!\n");
			nvram_set("link_internet", "1");
			link_internet = 1;
		}
		else
		{
			if (di_debug) fprintf(stderr, "no connection!\n");
			nvram_set("link_internet", "0");
			link_internet = 0;
		}

		if (link_internet == 1)
			alarm(10);
		else
			alarm(1);
	}
}

int
detect_internet(int argc, char *argv[])
{
	FILE *fp;

	/* write pid */
	if ((fp = fopen("/var/run/detect_internet.pid", "w")) != NULL)
	{
		fprintf(fp, "%d", getpid());
		fclose(fp);
	}

	nvram_set("link_internet", "2");

	if (nvram_match("di_debug", "1"))
		di_debug = 1;
	else
		di_debug = 0;

	if (nvram_match("wan0_proto", "dhcp") || nvram_match("wan0_proto", "static"))
		strcpy(wanif, "eth3");
	else
		strcpy(wanif, "ppp0");

	signal(SIGALRM, catch_sig_detect_internet);
	alarm(1);

	while (1)
	{
		pause();
	}

	return 0;
}
